{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 54, "column": 0}, "map": {"version":3,"sources":["file:///Users/abbylossa/soccerconnect-admin/src/utils/auth.ts"],"sourcesContent":["// src/utils/auth.ts\n//\n// SERVER-ONLY AUTH HELPERS\n//\n// - Reads sb-access-token / sb-refresh-token from cookies (Next 16 style)\n// - Uses service role key ONLY on the server to validate the user\n// - Gives you getCurrentUser() for \"am I logged in?\"\n// - Gives you requireUser() for protected routes\n//\n// IMPORTANT: don't import this from Client Components.\n\nimport { cookies } from \"next/headers\";\nimport { redirect } from \"next/navigation\";\nimport { createClient, type User } from \"@supabase/supabase-js\";\n\n// ----- ENV VARS (typed + runtime check) -----\nconst SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL as string;\nconst SERVICE_ROLE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY as string;\n\nif (!SUPABASE_URL || !SERVICE_ROLE_KEY) {\n  throw new Error(\n    \"[auth.ts] Missing Supabase env vars. Check NEXT_PUBLIC_SUPABASE_URL and SUPABASE_SERVICE_ROLE_KEY.\"\n  );\n}\n\n// Create a *server-only* supabase client that can validate tokens.\n// NOTE: SERVICE_ROLE_KEY never goes to browser.\nfunction getServiceClient() {\n  return createClient(SUPABASE_URL, SERVICE_ROLE_KEY, {\n    auth: {\n      persistSession: false,\n      autoRefreshToken: false,\n    },\n  });\n}\n\n// Helper to read the auth cookies from Next 16's async cookies()\nasync function readAuthCookies() {\n  // cookies() is async in Next 16, so we MUST await it\n  const cookieStore = await cookies();\n\n  // In prod we'll have two cookies we set at login\n  //   sb-access-token\n  //   sb-refresh-token\n  //\n  // BUT on localhost, Next dev tools will sometimes try to\n  // read+JSON.parse preview cookies (like \"base64-...\"),\n  // which can explode. We'll defensively guard against that.\n\n  const getCookie = (name: string): string | undefined => {\n    try {\n      const c = cookieStore.get(name);\n      // c is { name, value, ... } or undefined\n      if (!c) return undefined;\n      return c.value;\n    } catch (err) {\n      console.warn(\n        `[auth.ts] failed to read cookie \"${name}\":`,\n        (err as Error).message\n      );\n      return undefined;\n    }\n  };\n\n  const accessToken = getCookie(\"sb-access-token\");\n  const refreshToken = getCookie(\"sb-refresh-token\");\n\n  return { accessToken, refreshToken };\n}\n\n// Public helper: are they logged in? (does NOT redirect)\n// ----------------------------------------------------------------\nexport async function getCurrentUser(): Promise<{\n  user: User | null;\n  redirectToLogin: boolean;\n}> {\n  const { accessToken, refreshToken } = await readAuthCookies();\n\n  if (!accessToken || !refreshToken) {\n    // no session cookies at all\n    return {\n      user: null,\n      redirectToLogin: true,\n    };\n  }\n\n  const supabaseServer = getServiceClient();\n\n  // 1. Try to verify the access token against Supabase\n  const { data: userResult, error: userErr } =\n    await supabaseServer.auth.getUser(accessToken);\n\n  if (userErr || !userResult.user) {\n    // Access token might be expired, try refresh flow\n    const { data: refreshed, error: refreshErr } =\n      await supabaseServer.auth.refreshSession({\n        refresh_token: refreshToken,\n      });\n\n    if (refreshErr || !refreshed.session?.user) {\n      // refresh also failed -> no valid session\n      return {\n        user: null,\n        redirectToLogin: true,\n      };\n    }\n\n    // refresh succeeded -> the refreshed.session has new tokens,\n    // BUT: we do NOT silently rewrite cookies here.\n    // Why? We're in a helper that might be called during render,\n    // and setCookie() in the middle of a render causes weirdness.\n    //\n    // Instead we just treat them as logged in for now.\n    return {\n      user: refreshed.session.user,\n      redirectToLogin: false,\n    };\n  }\n\n  // access token was valid\n  return {\n    user: userResult.user,\n    redirectToLogin: false,\n  };\n}\n\n// Strict helper for protected routes/pages\n// Call this at the top of /protected/... pages.\n// If not logged in, it will redirect(\"/login\") on the server.\n// ----------------------------------------------------------------\nexport async function requireUser(): Promise<User> {\n  const { user, redirectToLogin } = await getCurrentUser();\n\n  if (redirectToLogin || !user) {\n    redirect(\"/login\");\n  }\n\n  return user;\n}\n"],"names":[],"mappings":"AAAA,oBAAoB;AACpB,EAAE;AACF,2BAA2B;AAC3B,EAAE;AACF,0EAA0E;AAC1E,kEAAkE;AAClE,qDAAqD;AACrD,iDAAiD;AACjD,EAAE;AACF,uDAAuD;;;;;;;AAEvD;AACA;AAAA;AACA;;;;AAEA,+CAA+C;AAC/C,MAAM;AACN,MAAM,mBAAmB,QAAQ,GAAG,CAAC,yBAAyB;AAE9D,IAAI,CAAC,gBAAgB,CAAC,kBAAkB;IACtC,MAAM,IAAI,MACR;AAEJ;AAEA,mEAAmE;AACnE,gDAAgD;AAChD,SAAS;IACP,OAAO,IAAA,uMAAY,EAAC,cAAc,kBAAkB;QAClD,MAAM;YACJ,gBAAgB;YAChB,kBAAkB;QACpB;IACF;AACF;AAEA,iEAAiE;AACjE,eAAe;IACb,qDAAqD;IACrD,MAAM,cAAc,MAAM,IAAA,0IAAO;IAEjC,iDAAiD;IACjD,oBAAoB;IACpB,qBAAqB;IACrB,EAAE;IACF,yDAAyD;IACzD,uDAAuD;IACvD,2DAA2D;IAE3D,MAAM,YAAY,CAAC;QACjB,IAAI;YACF,MAAM,IAAI,YAAY,GAAG,CAAC;YAC1B,yCAAyC;YACzC,IAAI,CAAC,GAAG,OAAO;YACf,OAAO,EAAE,KAAK;QAChB,EAAE,OAAO,KAAK;YACZ,QAAQ,IAAI,CACV,CAAC,iCAAiC,EAAE,KAAK,EAAE,CAAC,EAC5C,AAAC,IAAc,OAAO;YAExB,OAAO;QACT;IACF;IAEA,MAAM,cAAc,UAAU;IAC9B,MAAM,eAAe,UAAU;IAE/B,OAAO;QAAE;QAAa;IAAa;AACrC;AAIO,eAAe;IAIpB,MAAM,EAAE,WAAW,EAAE,YAAY,EAAE,GAAG,MAAM;IAE5C,IAAI,CAAC,eAAe,CAAC,cAAc;QACjC,4BAA4B;QAC5B,OAAO;YACL,MAAM;YACN,iBAAiB;QACnB;IACF;IAEA,MAAM,iBAAiB;IAEvB,qDAAqD;IACrD,MAAM,EAAE,MAAM,UAAU,EAAE,OAAO,OAAO,EAAE,GACxC,MAAM,eAAe,IAAI,CAAC,OAAO,CAAC;IAEpC,IAAI,WAAW,CAAC,WAAW,IAAI,EAAE;QAC/B,kDAAkD;QAClD,MAAM,EAAE,MAAM,SAAS,EAAE,OAAO,UAAU,EAAE,GAC1C,MAAM,eAAe,IAAI,CAAC,cAAc,CAAC;YACvC,eAAe;QACjB;QAEF,IAAI,cAAc,CAAC,UAAU,OAAO,EAAE,MAAM;YAC1C,0CAA0C;YAC1C,OAAO;gBACL,MAAM;gBACN,iBAAiB;YACnB;QACF;QAEA,6DAA6D;QAC7D,gDAAgD;QAChD,6DAA6D;QAC7D,8DAA8D;QAC9D,EAAE;QACF,mDAAmD;QACnD,OAAO;YACL,MAAM,UAAU,OAAO,CAAC,IAAI;YAC5B,iBAAiB;QACnB;IACF;IAEA,yBAAyB;IACzB,OAAO;QACL,MAAM,WAAW,IAAI;QACrB,iBAAiB;IACnB;AACF;AAMO,eAAe;IACpB,MAAM,EAAE,IAAI,EAAE,eAAe,EAAE,GAAG,MAAM;IAExC,IAAI,mBAAmB,CAAC,MAAM;QAC5B,IAAA,iMAAQ,EAAC;IACX;IAEA,OAAO;AACT","debugId":null}},
    {"offset": {"line": 174, "column": 0}, "map": {"version":3,"sources":["file:///Users/abbylossa/soccerconnect-admin/src/app/login/LoginClient.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/login/LoginClient.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/login/LoginClient.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;uCACe,IAAA,wQAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAAiS,GAC9T,+DACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 188, "column": 0}, "map": {"version":3,"sources":["file:///Users/abbylossa/soccerconnect-admin/src/app/login/LoginClient.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/login/LoginClient.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/login/LoginClient.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;uCACe,IAAA,wQAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAA6Q,GAC1S,2CACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 202, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 210, "column": 0}, "map": {"version":3,"sources":["file:///Users/abbylossa/soccerconnect-admin/src/app/login/page.tsx"],"sourcesContent":["import { getCurrentUser } from \"@/utils/auth\";\nimport { redirect } from \"next/navigation\";\nimport LoginClient from \"./LoginClient\";\n\nexport default async function LoginPage() {\n  const user = await getCurrentUser();\n\n  // If you're already logged in, just go to dashboard.\n  if (user) {\n    redirect(\"/protected\");\n  }\n\n  return (\n    <main className=\"min-h-screen flex items-start justify-center bg-white text-gray-900 py-16\">\n      <div className=\"w-full max-w-md space-y-6\">\n        <div className=\"rounded border p-4 text-sm leading-relaxed text-gray-700 bg-gray-50 border-gray-300\">\n          <strong>SoccerConnect Admin</strong>\n          <div className=\"text-xs text-gray-500 mt-1\">\n            Sign in with your admin credentials.\n          </div>\n        </div>\n\n        <LoginClient />\n      </div>\n    </main>\n  );\n}\n"],"names":[],"mappings":";;;;;AAAA;AACA;AAAA;AACA;;;;;AAEe,eAAe;IAC5B,MAAM,OAAO,MAAM,IAAA,sIAAc;IAEjC,qDAAqD;IACrD,IAAI,MAAM;QACR,IAAA,iMAAQ,EAAC;IACX;IAEA,qBACE,8OAAC;QAAK,WAAU;kBACd,cAAA,8OAAC;YAAI,WAAU;;8BACb,8OAAC;oBAAI,WAAU;;sCACb,8OAAC;sCAAO;;;;;;sCACR,8OAAC;4BAAI,WAAU;sCAA6B;;;;;;;;;;;;8BAK9C,8OAAC,8IAAW;;;;;;;;;;;;;;;;AAIpB","debugId":null}}]
}